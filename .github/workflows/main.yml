# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on: [push]
  # push:
  #   branches: [ master ]
  # pull_request:
  #   branches: [ master ]
  #   types: [closed]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2016, macOS-latest]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    - name: Install Ninja (Windows)
      if: runner.os == 'Windows'
      uses: crazy-max/ghaction-chocolatey@v1.2.2
      with:
        # Arguments to pass to Chocolatey
        args: install ninja
    - name: Install clang (Windows)
      if: runner.os == 'Windows'
      uses: crazy-max/ghaction-chocolatey@v1.2.2
      with:
        # Arguments to pass to Chocolatey
        args: install llvm
    - name: Build (Windows)
      if: runner.os == 'Windows'
      run: |
        mkdir build
        cd build
        "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        cmake -DCMAKE_C_COMPILER="C:/Program Files/LLVM/bin/clang-cl.exe" -DCMAKE_CXX_COMPILER="C:/Program Files/LLVM/bin/clang-cl.exe" -DCMAKE_BUILD_TYPE:STRING=Release -G Ninja ../ "-DCMAKE_LINKER:FILEPATH=C:/Program Files/LLVM/bin/lld-link.exe"
        ninja javascript_engine
      shell: cmd
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      with:
        # Artifact name
        name: win_dll # optional
        # A file, directory or wildcard pattern that describes what to upload
        path: script_engine.dll

    - name: Install (mac)
      if: runner.os == 'macOS'
      run: |
         brew install Ninja
         brew install llvm
         brew install cmake
    - name: Build (mac)
      if: runner.os == 'macOS'
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release -G Ninja ../
        ninja javascript_engine
# sh make_bundle.sh
      # $env:LIB = "C:\Program Files (x86)\Windows Kits\10\Lib\10.0.17763.1\um\x64;C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\lib\onecore\x64;C:\Program Files (x86)\Windows Kits\10\Lib\10.0.17763.1\ucrt\x64"
      # cmake -DCMAKE_C_COMPILER="C:/Program Files/LLVM/bin/clang-cl.exe" -DCMAKE_CXX_COMPILER="C:/Program Files/LLVM/bin/clang-cl.exe" -DCMAKE_BUILD_TYPE:STRING=Release -G Ninja ./ "-DCMAKE_LINKER:FILEPATH=C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.16.27023/bin/Hostx64/x64/link.exe" "-DCMAKE_MT:FILEPATH=C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.1/x64/mt.exe" "-DCMAKE_RC_COMPILER:FILEPATH=C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.1/x64/rc.exe" "-DCMAKE_CXX_STANDARD_LIBRARIES:STRING=kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib" "-DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=TRUE"

    # - name: Setup Ninja
    #   uses: ashutoshvarma/setup-ninja@v1
    #   with:
    #     # Ninja version. Make sure given ninja version exists in ninja github release
    #     version: 1.10.0 # default is 1.10.0
    #     # Folder where ninja binary will be downloaded
    #     # dest: # optional, default is ninja_bin
    #     # Override default platform detection logic. Accepted values are [mac, linux, win]
    #     platform: win # optional
    # - name: setup clang
    #   run: |
    #     Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
    #     scoop install llvm --global
    #     #scoop install ninja --global
    #     cmake -DMSVC=1 -DCMAKE_BUILD_TYPE:STRING=Release -G Ninja ./
    #     ninja javascript_engine
          
    # Runs a set of commands using the runners shell
    #- name: ninja build
      #run: |
        #cmake -DMSVC=1 -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_C_COMPILER="C:\Program Files\LLVM\bin\clang-cl" -DCMAKE_CXX_COMPILER="C:\Program Files\LLVM\bin\clang-cl" -G Ninja ./
        #ninja javascript_engine
